user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    # include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  0;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on; 
    # https://cipherli.st (requires Node.js 10)
    # ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    # Strong (requires Node.js 10)
    # ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256;
    # Compatibility:
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA;
    ssl_ecdh_curve secp384r1;
    ssl_session_cache none;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security "max-age=63072000";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Test SNI support.
    server {
        listen              443 ssl;
        server_name         test-teapot-server;

        ssl_certificate     ssl_teapot_cert.pem;
        ssl_certificate_key ssl_teapot_key.pem;

        location / {
            return 418;
        }
    }

    server {
        listen              443 ssl;
        server_name         test-https-server;

        ssl_certificate     ssl_cert.pem;
        ssl_certificate_key ssl_key.pem;

        location / {
            return 404;
        }

        location = /test-path {
            return 200 '{
                "status": "OK!",
                "headers": {
                    "host": "$http_host"
                }
            }';
            add_header Content-Type application/json;
        }
    }

    server {
        listen              808;
        server_name         test-http-server;

        location / {
            return 404;
        }

        location = /test-path-unencrypted {
            return 200 '{
                "status": "OK!",
                "headers": {
                    "host": "$http_host"
                }
            }';
            add_header Content-Type application/json;
        }
    }
}
